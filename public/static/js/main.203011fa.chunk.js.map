{"version":3,"sources":["Cell/Cell.js","Board/Board.js","Game/gameIteration.js","Game/Game.js","StartScreen/StartScreen.js","App.js","index.js"],"names":["Cell","props","classList","isActive","id","className","onMouseOver","handleMouseOver","Board","gameGrid","useState","isMousePressed","setMouseState","cellStateTo","setCellStateTo","handleMouseDown","event","target","split","map","x","parseInt","row","column","firstCellState","setCellState","handleMouseUp","onMouseDown","onMouseUp","onTouchMove","isEditMode","targetElement","document","elementFromPoint","touches","clientX","clientY","onTouchStart","onTouchEnd","rows","length","columns","grid","i","cellList","k","push","key","handleTouchMove","renderCell","generateGrid","calculateCellState","cellValue","neighborsSum","neighborsList","result","neighbor","livingNeighbors","neighbors","sumOfArray","neighborsCoordinate","array1","array2","Error","gameIteration","cloneDeep","nextIteration","preventDefault","stopImmediatePropagation","Game","useParams","emptyGrid","Array","from","fill","setGameGrid","intervalID","setIntervalID","isTouchDevice","setTouchStatus","editMode","setEditMode","useEffect","window","addEventListener","passive","capture","removeEventListener","prefixes","DocumentTouch","query","join","matchMedia","matches","e","console","error","is_touch_device","onClick","clearInterval","undefined","interval","setInterval","prevGrid","state","StartScreen","redirect","setRedirect","useForm","register","handleSubmit","onSubmit","data","to","type","name","defaultValue","ref","App","exact","path","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.203011fa.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css'\n\n\nfunction Cell(props){\n  let classList = \"square\";\n  if(props.isActive)\n    classList += \" active\"\n\n  return(\n    <p \n      id={props.id}\n      className={classList} \n      onMouseOver={props.handleMouseOver}\n    >\n    </p>\n  )\n}\n\nexport default Cell;","import React, {useState} from 'react';\nimport Cell from '../Cell/Cell';\nimport './Board.css'\n\n\nfunction Board(props) {\n  let [isMousePressed, setMouseState] = useState(false);\n  let [cellStateTo, setCellStateTo] = useState(1);\n\n  function renderCell(isActive, id, handleMouseOver, handleTouchMove){\n    return (\n      <Cell \n        isActive={isActive} \n        id={id} \n        handleMouseOver={handleMouseOver} \n        handleTouchMove={handleTouchMove}\n      />\n    )\n  }\n\n  function generateGrid(gameGrid){\n    const rows = gameGrid.length;\n    const columns = gameGrid[0].length;\n    let grid = [];\n    for(let i = 0; i < rows; i++){\n      let cellList = [];\n      for(let k = 0; k < columns; k++){\n        cellList.push(\n          <td key={k}>\n            {renderCell(\n              gameGrid[i][k], \n              `${i}:${k}`,\n              () => handleMouseOver(i, k),\n            )}\n          </td>)\n      }\n      grid.push(<tr key={i}>{cellList}</tr>)\n    }\n    return grid\n  }\n\n  function handleMouseDown(event){\n    if(event.target.id){\n      const [row, column] = event.target.id.split(':').map(x => parseInt(x));\n      let firstCellState = 1;\n      if(props.gameGrid[row][column] === 1){\n        setCellStateTo(0)\n        firstCellState = 0\n      }\n      props.setCellState(row, column, firstCellState)\n    }\n    setMouseState(true)\n  }\n  \n  function handleMouseOver(row, column) {\n    if(isMousePressed){\n      props.setCellState(row, column, cellStateTo)\n    }\n  }\n  \n  function handleMouseUp(){\n    setCellStateTo(1)\n    setMouseState(false)\n  }\n\n  function handleTouchStart(event){\n    if(props.isEditMode){\n      handleMouseDown(event)\n    }\n  }\n  \n  function handleTouchMove(event){\n    if(props.isEditMode){\n      const targetElement = document.elementFromPoint(event.touches[0].clientX, event.touches[0].clientY)\n      if(targetElement?.id){\n        const [row, column] = targetElement.id.split(':').map(x => parseInt(x));\n        props.setCellState(row, column, cellStateTo)\n      }\n    }\n  }\n\n  return (\n    <div>\n      <table\n        onMouseDown={handleMouseDown} \n        onMouseUp={handleMouseUp}\n        onTouchMove={handleTouchMove}\n        onTouchStart={handleTouchStart}\n        onTouchEnd={handleMouseUp}\n      >\n        <tbody>\n          {generateGrid(props.gameGrid)}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Board;","import {cloneDeep} from  'lodash';\n\n\nlet gameGrid;\n\nfunction gameIteration(grid){\n  gameGrid = cloneDeep(grid)\n  let nextIteration = cloneDeep(gameGrid);\n  for(let row = 0; row < gameGrid.length; row++){\n    for(let column = 0; column < gameGrid[0].length; column++){\n      nextIteration[row][column] = calculateCellState(row, column)\n    }\n  }\n  return nextIteration\n}\n\nfunction calculateCellState(row, column){\n  let cellValue = gameGrid[row][column];\n  let neighborsSum = livingNeighbors(neighborsCoordinate(row, column));\n  let result = 0;\n  if(cellValue){\n    if(neighborsSum === 2 || neighborsSum === 3){\n      result = 1\n    } else {\n      result = 0\n    }\n  } else {\n    if(neighborsSum === 3){\n      result = 1\n    } else {\n      result = 0\n    }\n  }\n  return result\n}\n\nfunction livingNeighbors(neighborsList){\n  let result = 0;\n  for(let neighbor of neighborsList){\n    let [row, column] = neighbor;\n    let cellValue = gameGrid[row][column];\n    result += cellValue\n  }\n  return result\n}\n\nfunction neighborsCoordinate(row, column){\n  const biases = [[-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1]];\n  let neighbors = [];\n  for(let bias of biases){\n    let neighbor = sumOfArray([row, column], bias);\n    if(neighbor[0] < 0){\n      neighbor[0] = gameGrid[0].length - 1\n    } else if(neighbor[0] > gameGrid[0].length - 1){\n      neighbor[0] = 0\n    }\n    if(neighbor[1] < 0){\n      neighbor[1] = gameGrid.length - 1\n    } else if(neighbor[1] > gameGrid.length - 1){\n      neighbor[1] = 0\n    }\n    neighbors.push(neighbor)\n  }\n  return neighbors\n}\n\nfunction sumOfArray(array1, array2){\n  if(array1.length !== array2.length){\n    throw new Error('Two arrays should have equal length')\n  }\n  let result = [];\n  for(let i = 0; i < array1.length; i++){\n    result.push(array1[i] + array2[i])\n  }\n  return result\n}\n\nexport default gameIteration;","import React, { useState, useEffect } from 'react';\nimport Board from '../Board/Board';\nimport {useParams} from 'react-router-dom';\nimport './Game.css';\n\nimport gameIteration from './gameIteration';\nimport {cloneDeep} from  'lodash';\n\nfunction preventDefault(event) {\n  event.preventDefault()\n  event.stopImmediatePropagation()\n}\n\nfunction Game(props) {\n  const {rows, columns} = useParams();\n  const emptyGrid = Array.from({length: parseInt(rows)}, () => new Array(parseInt(columns)).fill(0))\n  // array of array with columns * rows dimension\n  let [gameGrid, setGameGrid] = useState(emptyGrid);\n  let [intervalID, setIntervalID] = useState();\n  let [isTouchDevice, setTouchStatus] = useState();\n  let [editMode, setEditMode] = useState(false);\n\n  useEffect(() => {\n    if(editMode){\n      window.addEventListener('touchmove', preventDefault, {passive: false, capture: false})\n    } else {\n      window.removeEventListener('touchmove', preventDefault, {passive: false, capture: false})\n    }\n  }, [editMode])\n\n  function is_touch_device() {\n    try {\n        let prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n\n        let mq = function (query) {\n            return window.matchMedia(query).matches;\n        };\n\n        if (('ontouchstart' in window) || (typeof window.DocumentTouch !== \"undefined\" && document instanceof window.DocumentTouch)) {\n            return true;\n        }\n\n        return mq(['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join(''));\n    } catch (e) {\n        console.error('(Touch detect failed)', e);\n        return false;\n    }\n  }\n\n  useEffect(() => {\n    setTouchStatus(is_touch_device())\n  }, [])\n\n  function handleStart(){\n    if(intervalID){\n      clearInterval(intervalID)\n      setIntervalID(undefined)\n    } else {\n      let interval = setInterval(() => setGameGrid(prevGrid => gameIteration(prevGrid)), 100);\n      setIntervalID(interval)\n    }\n  }\n\n  function setCellState(row, column, state){\n    let grid = cloneDeep(gameGrid);\n    grid[row][column] = state\n    setGameGrid(grid)\n  }\n\n  return (\n    <div className=\"flex-column\">\n      <div>\n        {isTouchDevice && \n          <button className=\"fixed\"\n          onClick={() => setEditMode(!editMode)}>{editMode ? 'Move' : 'Edit'}\n          </button>\n        }\n        <button \n          onClick={handleStart}>{intervalID ? 'Stop' : 'Start'}\n        </button>\n        <button \n          onClick={() => setGameGrid(emptyGrid)}>Clear\n        </button>\n      </div>\n      <Board \n        isEditMode={editMode}\n        gameGrid={gameGrid} \n        setCellState={setCellState}\n      />\n    </div>\n  )\n}\n\nexport default Game;","import React, {useState} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport './StartScreen.css';\n\nimport {useForm} from 'react-hook-form';\n\n\nfunction StartScreen() {\n  let [redirect, setRedirect] = useState();\n  const {register, handleSubmit} = useForm();\n\n  function onSubmit(data){\n    setRedirect(<Redirect push to={`/game/${data.rows}/${data.columns}`} />)\n  }\n\n  return (\n    <div className=\"flex-column bg justify-center\">\n      {redirect}\n      <h1>Conway's Game of Life</h1>\n      <h4>Set the field size</h4>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <label>Rows:</label>\n        <input type=\"number\" name=\"rows\" defaultValue=\"35\" ref={register }/>\n        <label>Columns:</label>\n        <input type=\"number\" name=\"columns\" defaultValue=\"35\" ref={register}/>\n        <button>Start</button>\n      </form>\n    </div>\n  )\n}\n\nexport default StartScreen;","import React from 'react';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\n\n\nimport Game from './Game/Game';\nimport StartScreen from './StartScreen/StartScreen'\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/gol\">  \n          <StartScreen />\n        </Route>\n        <Route path=\"/gol/game/:rows/:columns\">\n          <Game />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}